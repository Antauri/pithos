# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"
PITHOS_CLUSTER_SIZE = (ENV['PITHOS_CLUSTER_SIZE'] && ENV['PITHOS_CLUSTER_SIZE'].to_i) || 9

#prod
EXOSCALE_API_KEY = ENV['EXOSCALE_API_KEY']
EXOSCALE_API_SECRET = ENV['EXOSCALE_API_SECRET']
EXOSCALE_INSTANCE_TYPE = ENV['EXOSCALE_INSTANCE_TYPE']
EXOSCALE_TEMPLATE = ENV['EXOSCALE_TEMPLATE']
EXOSCALE_ZONE = ENV['EXOSCALE_ZONE']
EXOSCALE_HOST = ENV['EXOSCALE_HOST']

EXOSCALE_KEYPAIR = ENV['EXOSCALE_KEYPAIR'] || 'default'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.box = "exoscale"
  config.hostmanager.manage_host = true

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.


  config.vm.provider :cloudstack do |cloudstack, override|
    cloudstack.host = EXOSCALE_HOST
    cloudstack.path = "/compute"
    cloudstack.port = "443"
    cloudstack.scheme = "https"
    cloudstack.network_id = "00304a04-c7ea-4e77-a786-18bc64347bf7"

    cloudstack.template_id = EXOSCALE_TEMPLATE
    cloudstack.zone_id = EXOSCALE_ZONE


    cloudstack.network_type = "Basic"
    cloudstack.api_key = EXOSCALE_API_KEY
    cloudstack.secret_key = EXOSCALE_API_SECRET
    cloudstack.service_offering_id = EXOSCALE_INSTANCE_TYPE

    cloudstack.keypair = EXOSCALE_KEYPAIR
  end

  config.vm.provision :shell, inline: "apt-get update"
  config.vm.provision :shell, inline: "apt-get -qy install puppet"
  config.vm.provision :hostmanager

  PITHOS_CLUSTER_SIZE.times do |i|
    config.vm.define "store#{i}" do |node|
      node.ssh.username = "root"
      node.ssh.private_key_path = "#{ENV['HOME']}/.ssh/id_rsa"
      node.vm.provision :shell, inline: "hostname store#{i}"
      node.vm.hostname = "store#{i}"
      node.vm.provision :puppet do |puppet|
        puppet.working_directory = "/vagrant"
        puppet.manifests_path = "manifests"
        puppet.module_path = "modules"
        puppet.hiera_config_path = "hiera.yaml"
        puppet.manifest_file = "store.pp"
        puppet.facter = {
          "cassandra_topology" => PITHOS_CLUSTER_SIZE.times.map { |i| "store#{i}"}.join(",")
        }
      end
    end
  end
end
